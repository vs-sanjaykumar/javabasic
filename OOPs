1)Write a Java program to create a class called "Person" with a name and age attribute. Create two instances of the "Person" class, set their attributes using the constructor, and print their name and age.

class Person{
  private String name;
  private int age;
  
  public Person(String name,int age){
    this.name=name;
    this.age=age;
  }
  void getname(){
    System.out.println(name);
  }
  void getage(){
    System.out.println(age);
  }
  void setname(String name){
    this.name=name;
  }
  void setage(int age){
    this.age=age;
  }
}

class Main{
  public static void main(String []args){
    Person p=new Person("sanjay",20);
    Person pp=new Person("kumar",19);
    p.getname();
    pp.getname();
    p.getage();
    pp.getage();
    pp.setname("suriya");
    pp.getname();
  }
}

output
sanjay
kumar
20
19
suriya


2)Write a Java program to create a class called "Rectangle" with width and height attributes. Calculate the area and perimeter of the rectangle.



class Rectangle{
  int area(int l,int b){
    return l*b;
  }
  int perimeter(int l,int b){
    return 2*(l+b);
  }
}
class Main{
  public static void main(String []args){
    Rectangle r=new Rectangle();
    System.out.println(r.area(5,5));
    System.out.println(r.perimeter(10,10));
  }
}

output
25
40


3)Write a Java program to create a class called "Dog" with a name and breed attribute. Create two instances of the "Dog" class,
set their attributes using the constructor and modify the attributes using the setter methods and print the updated values.

class Dog{
  private String name;
  private String breed;
  
  public Dog(String name,String breed){
    this.name=name;
    this.breed=breed;
  }
  void getname(){
    System.out.println(name);
  }
  void getbreed(){
    System.out.println(breed);
  }
  void setname(String name){
    this.name=name;
  }
  void setbreed(String breed){
    this.breed=breed;
  }
}

class Main{
  public static void main(String []args){
    Dog p=new Dog("good","puppy");
    Dog pp=new Dog("bad","labrador");
    p.getname();
    pp.getname();
    p.getbreed();
    pp.getbreed();
    pp.setname("ninja");
    pp.getname();
  }
}

output
good
bad
puppy
labrador
ninja


4)Write a Java program to create a class called "Circle" with a radius attribute.
You can access and modify this attribute. Calculate the area and circumference of the circle.

class Circle{
  int area(int radius){
    return radius*radius;
  }
  double perimeter(int radius){
    return 2*3.14*radius;
  }
}

class Main{
  public static void main(String []args){
    Circle c=new Circle();
    System.out.println(c.area(5));
    System.out.println(c.perimeter(10));
  }
}

output
25
62.800000000000004


5)Create an abstract class Shape with an abstract method area(). Implement this class in a Circle and Rectangle class to calculate their respective areas.

abstract class Shape {
    abstract double area();
}

class Circle extends Shape {
    double radius;

    Circle(double radius) {
        this.radius = radius;
    }

    @Override
    double area() {
        return Math.PI * radius * radius;
    }
}

class Rectangle extends Shape {
    double length, width;

    Rectangle(double length, double width) {
        this.length = length;
        this.width = width;
    }

    @Override
    double area() {
        return length * width;
    }
}

public class Main {
    public static void main(String[] args) {
        Shape circle = new Circle(5);
        Shape rectangle = new Rectangle(4, 6);
        System.out.println(circle.area());
        System.out.println(rectangle.area());
    }
}

output

78.53981633974483
24.0


6.Create an abstract class Vehicle with methods start(), stop(), and fuelType(). Implement this in Car and Bike classes.

abstract class Vehicle {
    abstract void start();
    abstract void stop();
    abstract String fuelType();
}

class Car extends Vehicle {
    @Override
    void start() {
        System.out.println("Car is starting");
    }

    @Override
    void stop() {
        System.out.println("Car is stopping");
    }

    @Override
    String fuelType() {
        return "Petrol or Diesel";
    }
}

class Bike extends Vehicle {
    @Override
    void start() {
        System.out.println("Bike is starting");
    }

    @Override
    void stop() {
        System.out.println("Bike is stopping");
    }

    @Override
    String fuelType() {
        return "Petrol";
    }
}

public class Main {
    public static void main(String[] args) {
        Vehicle car = new Car();
        Vehicle bike = new Bike();
        car.start();
        System.out.println(car.fuelType());
        car.stop();

        bike.start();
        System.out.println( bike.fuelType());
        bike.stop();
    }
}

output
Car is starting
Petrol or Diesel
Car is stopping
Bike is starting
Petrol
Bike is stopping


7.Create an abstract class Employee with a constructor to initialize name and id. Implement the class in Developer and Manager classes.

abstract class Employee {
    String name;
    int id;

    Employee(String name, int id) {
        this.name = name;
        this.id = id;
    }

    abstract void workDetails();
}

class Developer extends Employee {
    Developer(String name, int id) {
        super(name, id);
    }

    @Override
    void workDetails() {
        System.out.println("Developer " + name + " (ID: " + id + ") works on coding.");
    }
}

class Manager extends Employee {
    Manager(String name, int id) {
        super(name, id);
    }

    @Override
    void workDetails() {
        System.out.println("Manager " + name + " (ID: " + id + ") manages projects.");
    }
}

public class Main {
    public static void main(String[] args) {
        Employee dev = new Developer("Sanjay", 101);
        Employee mgr = new Manager("Ravi", 102);

        dev.workDetails();
        mgr.workDetails();
    }
}

output

Developer Sanjay (ID: 101) works on coding.
Manager Ravi (ID: 102) manages projects.


8. Create an abstract class Bank with an abstract method interestRate() and a non-abstract method bankDetails(). Implement this class in SBI and HDFC.

abstract class Bank {
    abstract double interestRate();

    void bankDetails() {
        System.out.println("Welcome to our Bank!");
    }
}

class SBI extends Bank {
    @Override
    double interestRate() {
        return 6.5;
    }
}

class HDFC extends Bank {
    @Override
    double interestRate() {
        return 7.2;
    }
}

public class Main {
    public static void main(String[] args) {
        Bank sbi = new SBI();
        Bank hdfc = new HDFC();

        sbi.bankDetails();
        System.out.println("SBI Interest Rate: " + sbi.interestRate() + "%");

        hdfc.bankDetails();
        System.out.println("HDFC Interest Rate: " + hdfc.interestRate() + "%");
    }
}

output
Welcome to our Bank!
SBI Interest Rate: 6.5%
Welcome to our Bank!
HDFC Interest Rate: 7.2%


9.Create an interface Printable and an abstract class Document. Implement both in PDFDocument and WordDocument classes.
interface Printable {
    void print();
}

abstract class Document {
    String title;

    Document(String title) {
        this.title = title;
    }

    abstract void open();
}

class PDFDocument extends Document implements Printable {
    PDFDocument(String title) {
        super(title);
    }

    @Override
    void open() {
        System.out.println("Opening PDF Document: " + title);
    }

    @Override
    public void print() {
        System.out.println("Printing PDF Document: " + title);
    }
}

class WordDocument extends Document implements Printable {
    WordDocument(String title) {
        super(title);
    }

    @Override
    void open() {
        System.out.println("Opening Word Document: " + title);
    }

    @Override
    public void print() {
        System.out.println("Printing Word Document: " + title);
    }
}

public class Main {
    public static void main(String[] args) {
        Printable pdf = new PDFDocument("Java Abstraction");
        Printable word = new WordDocument("OOP Concepts");

        ((Document) pdf).open();
        pdf.print();

        ((Document) word).open();
        word.print();
    }
}

output

Opening PDF Document: Java Abstraction
Printing PDF Document: Java Abstraction
Opening Word Document: OOP Concepts
Printing Word Document: OOP Concepts


10. Create an abstract class DataProcessor with a method processData() for handling different data types (e.g., String and Integer). Implement it in two classes.

abstract class DataProcessor {
    abstract void processData(Object data);
}

class StringProcessor extends DataProcessor {
    @Override
    void processData(Object data) {
        if (data instanceof String) {
            System.out.println("Processing String: " + data.toString().toUpperCase());
        } else {
            System.out.println("Invalid data for StringProcessor.");
        }
    }
}

class IntegerProcessor extends DataProcessor {
    @Override
    void processData(Object data) {
        if (data instanceof Integer) {
            System.out.println("Processing Integer: " + ((Integer) data * 2));
        } else {
            System.out.println("Invalid data for IntegerProcessor.");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        DataProcessor stringProcessor = new StringProcessor();
        DataProcessor integerProcessor = new IntegerProcessor();

        stringProcessor.processData("hello");
        integerProcessor.processData(42);
    }
}

output

Processing String: HELLO
Processing Integer: 84


